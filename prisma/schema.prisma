generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model Store {
  id           String        @id @default(uuid())
  name         String
  description  String?
  serviceUnits ServiceUnit[]
  createdAt    DateTime      @default(now())
}

model ServiceUnit {
  id              String     @id @default(uuid())
  name            String
  description     String
  durationMins    Int
  pricePerBooking Float
  storeId         String
  store           Store      @relation(fields: [storeId], references: [id])
  widgets         Widget[]
  timeslots       Timeslot[]
  createdAt       DateTime   @default(now())
}

model Widget {
  id             String      @id @default(uuid())
  serviceUnitId  String
  serviceUnit    ServiceUnit @relation(fields: [serviceUnitId], references: [id])
  bookings       Booking[]
  allowedOrigins String[]
  createdAt      DateTime    @default(now())
}

model Timeslot {
  id            String      @id @default(uuid())
  serviceUnitId String
  serviceUnit   ServiceUnit @relation(fields: [serviceUnitId], references: [id])
  startTime     DateTime
  endTime       DateTime
  booking       Booking?    @relation("TimeslotBooking")
}

model Booking {
  id         String @id @default(uuid())
  name       String
  email      String
  numPlayers Int

  widgetId String
  widget   Widget @relation(fields: [widgetId], references: [id])

  timeslotId String?   @unique
  timeslot   Timeslot? @relation("TimeslotBooking", fields: [timeslotId], references: [id])

  status    BookingStatus @default(PENDING)
  createdAt DateTime      @default(now())
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  SUPER_ADMIN
  ADMIN
}
